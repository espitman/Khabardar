function file_exists(url) {
	var req = this.window.ActiveXObject ? new ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest();
	if (!req) {
		throw new Error('XMLHttpRequest not supported');
	}

	// HEAD Results are usually shorter (faster) than GET
	req.open('HEAD', url, false);
	req.send(null);
	if (req.status == 200) {
		return true;
	}

	return false;
}

function str_replace(search, replace, subject, count) {
	var i = 0, j = 0, temp = '', repl = '', sl = 0, fl = 0, f = [].concat(search), r = [].concat(replace), s = subject, ra = Object.prototype.toString.call(r) === '[object Array]', sa = Object.prototype.toString.call(s) === '[object Array]';
	s = [].concat(s);
	if (count) {
		this.window[count] = 0;
	}

	for ( i = 0, sl = s.length; i < sl; i++) {
		if (s[i] === '') {
			continue;
		}
		for ( j = 0, fl = f.length; j < fl; j++) {
			temp = s[i] + '';
			repl = ra ? (r[j] !== undefined ? r[j] : '') : r[0];
			s[i] = (temp).split(f[j]).join(repl);
			if (count && s[i] !== temp) {
				this.window[count] += (temp.length - s[i].length) / f[j].length;
			}
		}
	}
	return sa ? s : s[0];
}

function explode(delimiter, string, limit) {

	if (arguments.length < 2 || typeof delimiter === 'undefined' || typeof string === 'undefined')
		return null;
	if (delimiter === '' || delimiter === false || delimiter === null)
		return false;
	if ( typeof delimiter === 'function' || typeof delimiter === 'object' || typeof string === 'function' || typeof string === 'object') {
		return {
			0 : ''
		};
	}
	if (delimiter === true)
		delimiter = '1';

	// Here we go...
	delimiter += '';
	string += '';

	var s = string.split(delimiter);

	if ( typeof limit === 'undefined')
		return s;

	// Support for limit
	if (limit === 0)
		limit = 1;

	// Positive limit
	if (limit > 0) {
		if (limit >= s.length)
			return s;
		return s.slice(0, limit - 1).concat([s.slice(limit - 1).join(delimiter)]);
	}

	// Negative limit
	if (-limit >= s.length)
		return [];

	s.splice(s.length + limit);
	return s;
}
